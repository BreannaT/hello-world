using System;
using System.Collections.Generic;

namespace GradeBook
{
    public delegate void GradeAddedDelegate(object sender, EventArgs args);

    public class Book
    {
        public Book(string name)
        {
            grades = new List<double>();
            Name = name;
        }

        public void AddLetterGrade(char letter)
        //public void AddGrade(char letter) 
        //works too because it has different signature
        //which does not include return type 
        {
            switch(letter)
            {
                case 'A':
                    AddGrade(90);
                    break;

                case 'B':
                    AddGrade(80);
                    break;
                case 'C':
                    AddGrade(70);
                    break;
                case 'D':
                    AddGrade(60);
                    break;
                
                default:
                    AddGrade(0);
                    break;

            }
        }
        
        public void AddGrade(double grade)
        {
            if (grade <= 100 && grade >=0)
            {
            grades.Add(grade);
            if (GradeAdded != null)
            {
                GradeAdded(this, new EventArgs());
            }

            }
            else{
                throw new ArgumentException($"Invalid {nameof(grade)}");
                //Console.WriteLine("Damn, invalid entry girl.");
            }
        }
        public event GradeAddedDelegate GradeAdded;

        public Statistics GetStatistics()
        {
            var result = new Statistics();
            result.Average=0.0; 
            result.High = double.MinValue;
            result.Low = double.MaxValue;

            //foreach(var grade in grades)
            //var index = 0;
            //do
            //while(index < grades.Count)
            for(var index = 0; index < grades.Count; index += 1)
            {
                   
                    result.Low = Math.Min(grades[index], result.Low);
                    result.High= Math.Max(grades[index], result.High);
                    result.Average += grades[index];
                    //index += 1;

            } //while(index < grades.Count);  
            result.Average /= grades.Count;

            switch(result.Average)
            {
                case var d when d >= 90.0:
                    result.letter = 'A';
                    break;
                
                case var d when d >= 80.0:
                    result.letter = 'B';
                    break;

                case var d when d >= 70.0:
                    result.letter = 'C';
                    break;
                
                case var d when d >= 60.0:
                    result.letter = 'D';
                    break;

                default:
                    result.letter = 'F';
                    break;



            }
            return result;
           
            
            
        }

   //these are feilds:
    private List<double> grades;
    //public string Name;

    //This is longform a property:
    /* public string Name
    {
        get
        {
          return name;  
        }
        set
        {
            if (!string.IsNullOrEmpty(value)) 
                { 
                     name = value;  
                }
            else
            {
                Console.WriteLine("Sorry dude, you enterred an unacceptable name.");
            }

        }
    }
    // this is a backing field needed for longform property:
    private string name;
    */
    // here is the easier softer way:
    public string Name
    {
        get;
        set;
    }
    
    public const string CATEGORY = "Science";
    //cannot write to or change this baby ANYWHERE 

    //readonly string category = "Science";
    // can only be written into in assignment or class constuctor. Bam.
    }
}
